{"version":3,"sources":["context/index.js","components/ProductItem.js","components/ProductCatalogue.js","App.js","index.js"],"names":["Store","data","cart","print","str","console","log","bill","reduce","acc","cur","price","addToCart","item","push","StoreContext","React","createContext","ProductItem","productInfo","id","productName","icon","inventory","className","disabled","onClick","ProductList","store","useContext","useState","totalBill","setTotalBill","products","map","i","Fragment","length","cartItem","App","Provider","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAIMA,EAAQ,CAEZC,K,KACAC,KAAM,GACNC,MAAO,SAACC,GAAD,OAASC,QAAQC,IAAIF,IAC5BG,KAAM,WAEJ,OAAOP,EAAME,KAAKM,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,EAAIC,QAAO,IAG1DC,UAAW,SAACC,GAAD,OAAUb,EAAME,KAAKY,KAAKD,KAEjCE,EAAeC,IAAMC,cAAcjB,G,OCiB1BkB,EA/BK,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAaP,EAAgB,EAAhBA,UAE1BQ,EAA4CD,EAA5CC,GAAIC,EAAwCF,EAAxCE,YAAaC,EAA2BH,EAA3BG,KAAMX,EAAqBQ,EAArBR,MAAOY,EAAcJ,EAAdI,UAEtC,OACE,qBAAIC,UAAU,kBAAd,UACE,6BAAKH,IACL,4BAAIC,IACJ,+BAAKX,EAAL,YACA,oBAAGa,UAAU,YAAb,iBACO,IACL,+BACGD,EAAS,2EAEN,sFACE,IANV,0BASA,wBACEE,SAAwB,IAAdF,EACVG,QAAS,WACPrB,QAAQC,IAAIa,GACZP,EAAUO,IAJd,SAOGI,EAAY,EAAI,cAAgB,eApBAH,ICkE1BO,EArEK,WAIlB,IAAMC,EAAQC,qBAAWd,GAIzB,EAAkCe,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAGMC,EAAWL,EAAM3B,KAAKiC,KAAI,SAACrB,EAAMsB,GAAP,OAC9B,cAAC,EAAD,CAAqBhB,YAAaN,EAAMD,UAAWgB,EAAMhB,WAAvCuB,MA0BpB,OAxBA9B,QAAQC,IAAIsB,EAAM1B,MA0BhB,cADA,CACC,IAAMkC,SAAP,WACE,sBAAKZ,UAAU,eAAf,UACE,sDACA,sBAAKA,UAAU,aAAf,wBAEGI,EAAM1B,KAAKmC,OACRT,EAAM1B,KAAKgC,KAAI,SAACI,EAAUH,GAAX,OACb,cAAC,EAAD,CAAqBhB,YAAamB,GAAhBH,MAEpB,qBAEN,wBAAQT,QAAS,kBAAMM,EAAaJ,EAAMrB,SAA1C,wBACA,4DAA+BwB,EAA/B,eAEF,oBAAIP,UAAU,eAAd,SAA8BS,QCdrBM,MAvCf,WA+BE,OACE,eAACxB,EAAayB,SAAd,CAAuBC,MAAOzC,EAA9B,UACE,8DACA,cAAC,EAAD,QClCN0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.5f78eaa9.chunk.js","sourcesContent":["import React from \"react\";\nimport Data from \"../data.json\";\n\n// create an object for context\nconst Store = {\n  // data is a reference of Data\n  data: Data,\n  cart: [],\n  print: (str) => console.log(str),\n  bill: function () {\n    // return this.cart.reduce((acc, cur) => acc + cur.price, 0);\n    return Store.cart.reduce((acc, cur) => acc + cur.price, 0);\n  },\n  //   this just adds items/products into our cart >>\n  addToCart: (item) => Store.cart.push(item),\n};\nconst StoreContext = React.createContext(Store);\n\nexport { Store, StoreContext };\n\n//try without the React in front of createContext\n","import React from \"react\";\n\nconst ProductItem = ({ productInfo, addToCart }) => {\n  // deconstruct productInfo >>\n  const { id, productName, icon, price, inventory } = productInfo;\n\n  return (\n    <li className=\"product-wrapper\" key={id}>\n      <h2>{productName}</h2>\n      <i>{icon}</i>\n      <h4>{price} Euros</h4>\n      <p className=\"inventory\">\n        Only{\" \"}\n        <span>\n          {inventory\n            ? `There are only {inventory} items left in stock. Do you want to buy more?`\n            : \"You just added the last item of {productName} into your cart! Phew, just in time!\"}\n        </span>{\" \"}\n        items left in stock.\n      </p>\n      <button\n        disabled={inventory === 0}\n        onClick={() => {\n          console.log(productInfo);\n          addToCart(productInfo);\n        }}\n      >\n        {inventory > 0 ? \"Add to cart\" : \"Sold Out\"}\n      </button>\n    </li>\n  );\n};\n\nexport default ProductItem;\n","import React, { useState, useContext } from \"react\";\nimport { StoreContext } from \"../context\";\nimport ProductItem from \"./ProductItem\";\n\nconst ProductList = () => {\n  // new way with context >>\n\n  // use context from StoreContext >>\n  const store = useContext(StoreContext);\n  // console.log(store);\n\n  // apply state to our bill >>\n  const [totalBill, setTotalBill] = useState(0);\n\n  // map through data for each product\n  const products = store.data.map((item, i) => (\n    <ProductItem key={i} productInfo={item} addToCart={store.addToCart} />\n  ));\n  console.log(store.cart);\n  // console.log(products);\n\n  // old way >>\n  // states >>\n  // const [totalBill, setTotalBill] = useState(0);\n  // const [cart, setCart] = useState([]);\n\n  // add each item to cart with click >>\n  // const addToCart = (item) => {\n  //   setCart((prevState) => [...prevState, item]);\n  // };\n  // << this still has issues and does not work properly\n\n  // map through json data to get each item >>\n  // const items = data.map((item, i) => (\n  //   <ProductItem key={i} productInfo={item} addToCart={addToCart} />\n  // ));\n\n  // calculate the total bill on click >>\n  // const calculateTotal = () => {\n  //   setTotalBill(cart.reduce((acc, cur) => acc + cur.price, 0));\n  // };\n  // console.log({ cart });\n  return (\n    // new way with context >>\n    <React.Fragment>\n      <div className=\"cart-wrapper\">\n        <h3>Items added to cart:</h3>\n        <div className=\"cart-items\">\n          Cart Items:\n          {store.cart.length\n            ? store.cart.map((cartItem, i) => (\n                <ProductItem key={i} productInfo={cartItem} />\n              ))\n            : \"Nothing in cart\"}\n        </div>\n        <button onClick={() => setTotalBill(store.bill())}>Total bill</button>\n        <span> (excl. delivery fees): {totalBill} Euros</span>\n      </div>\n      <ul className=\"product-list\">{products}</ul>\n    </React.Fragment>\n\n    // old way without context >>\n    // <React.Fragment>\n    //   <div className=\"cart-wrapper\">\n    //     <h3>Items added to cart:</h3>\n    //     <div className=\"cart-items\">{cart.join(\", \")}</div>\n    //     <button onClick={calculateTotal}>Total bill</button>\n    //     <span> (excl. delivery fees): {totalBill} Euros</span>\n    //   </div>\n    //   <ul className=\"product-list\">{items}</ul>\n    // </React.Fragment>\n  );\n};\nexport default ProductList;\n\n// add items to cart and see what was added\n// make items removable from cart\n// why not all visible when cart printed out in console\n\n// issues\n// the cart only prints out [object Object]\n","import React, { useState } from \"react\";\n// import Data from \"./data.json\"; // old way\nimport ProductList from \"./components/ProductCatalogue\";\nimport { Store, StoreContext } from \"./context\";\n\nfunction App() {\n  // new way using context >> nothing here\n\n  // old way >>\n  // useState >>\n  // const [userInput, setUserInput] = useState(\"\");\n  // const [data, setData] = useState(Data);\n  // // << initialize state with Data and send data to child\n\n  // // when the user types into searchbar >>\n  // const handleChange = (e) => {\n  //   setUserInput(e.target.value);\n  //   const searchText = userInput.toLowerCase().trim();\n  //   // function for filtering with searchbar input >>\n  //   if (searchText) {\n  //     let filteredArray = data.filter((element) =>\n  //       element.productName.includes(searchText)\n  //     );\n  //     setData(filteredArray);\n  //     // << filtered only shows results after entering the second character, why?\n  //   } else {\n  //     setData(Data);\n  //     // << why is this still filtered?\n  //   }\n  // };\n\n  // // on submit >>\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  // };\n\n  return (\n    <StoreContext.Provider value={Store}>\n      <h1>Spend some money in my store</h1>\n      <ProductList />\n    </StoreContext.Provider>\n  );\n}\n\nexport default App;\n\n// Create extra component for searchbar?\n\n// Do Not forget:\n//         <ProductList data={userInput ? filteredData : data} />\n// show items in cart somehow\n// style more\n// deploy\n\n{\n  /* old way without context >> \n      <div className=\"App\">*/\n}\n{\n  // for having homepage and not seeing images do this >>\n  //<img src={`${process.env.PUBLIC_URL}/${data[0].img}`} alt=\"Sushi\" />\n  // fontawesome icons and features >>\n  //<FontAwesomeIcon icon={[\"fab\", \"apple\"]} size=\"6x\" rotation={90} />\n}\n{\n  /* <h1>Spend some money in my store</h1>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <input\n          type=\"text\"\n          onChange={handleChange}\n          value={userInput}\n          placeholder=\"Search your item\"\n        />\n      </form>\n      <ProductList data={data} /> */\n}\n// </div>\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/main.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}